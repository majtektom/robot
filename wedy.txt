test



﻿strumień video leci przez mjpg-streamer bo mało obciąża system.
wget http://lilnetwork.com/download/raspberrypi/mjpg-streamer.tar.gz
sudo apt-get install libjpeg8-dev
sudo apt-get install imagemagick

puszenie stromienia na porcie 8090. podgląd np http://192.168.1.10:8090
./mjpg_streamer -i "./input_uvc.so -y" -o "./output_http.so -p 8090 -w ./www" &


https://www.youtube.com/watch?v=H7y16_KjaTY&list=RD-P6Cwns25Uo&index=5

http://mikrokontroler.pl/2013/07/29/pierwsze-kroki-z-raspberry-pi-aplikacje-wideo-bazujace-na-opencv/

uprawnienia do kozystania z i2c i uarta
sudo chmod a+rw /dev/ttyAMA0
sudo chmod a+rw /dev/i2c-1
sudo adduser pi i2c




uruchomienie usługi
skrypt robot.sh kopiujemy do /usr/sbin
skrypt robot kopiujemy do /etc/init.d/

dodajemy do autostartu
 sudo update-rc.d robot defaults 20


zmiana idei serwer www to webioip z zainstalowaną poprawką nc rasberypi3
uruchamiamy logi po rs po czym w pliku  /boot/cmdline.txt 
wywalamy wysyłanie logów na uarta 


sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
i ustawiamy:
network={
        ssid="NazwaSieciWiFi"
        psk="HasłoWiFi"
}

sudo raspi-config i ustawiamy sobie co chcemy polskie kodowanie, właczmy ssh, uart,i2c,spi
poszerzamy partycję


sudo apt-get update
sudo apt-get upgrade
sudo apt-get install rpi-update
rpi-update

instalujemy i2c-tools watchdog mc

instalacja node.js

sudo mkdir /opt/node	
wget http://nodejs.org/dist/latest-v7.x/node-v7.1.0-linux-armv7l.tar.gz
tar xvzf node-v0.11.2-linux-arm-pi.tar.gz
sudo cp -r node-v0.11.2-linux-arm-pi/* /opt/node	
rm -r node-v0.11.2-linux-arm-pi
sudo nano /etc/profile 
edytujemy przed export PATH:
NODE_JS_HOME="/opt/node"
PATH="$PATH:$NODE_JS_HOME/bin"

sudo reboot

nano nodejs.sh - wklejamy do pliku:

#!/bin/bash
### BEGIN INIT INFO
# Provides:          nodejs.sh 
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: nodejs.sh 
# Description:       nodejs
### END INIT INFO

NODE=/opt/node/bin/node
SERVER_JS_FILE=/home/pi/app/server.js
USER=pi
OUT=/home/pi/nodejs.log

case "$1" in

start)
    echo "starting node: $NODE $SERVER_JS_FILE"
    sudo -u $USER $NODE $SERVER_JS_FILE > $OUT 2>$OUT &
    ;;

stop)
    killall $NODE
    ;;

*)
    echo "usage: $0 (start|stop)"
esac

exit 0
///////////////////////////////////////////////
chmod 755 nodejs.sh
sudo mv nodejs.sh /etc/init.d
sudo update-rc.d nodejs.sh defaults
tworzymy naszą aplikację
mkdir /home/pi/app
nano app/server.js wklejamy

var http = require('http');

http.createServer(function(req,resp) {
    resp.writeHead(200, {"Content-Type": "text/plain"});
    resp.write("Hello World");
    resp.end();
    
    console.log("sample output to console");

}).listen(8080);
//////////////////////
sudo /etc/init.d/nodejs.sh start
mamy działający serwer node wstający razem z systemem


uruchamiamy watchdoga

sudo modprobe bcm3510
sudo nano /etc/modules - na końcu dopisujemy bcm3510
sudo apt-get install watchdog chkconfig
sudo chkconfig watchdog on
sudo /etc/init.d/watchdog start
sudo update-rc.d watchdog defaults
sudo nano /etc/default/watchdog - zmieniamy watchdog_module=„none” na watchdog_module=„bcm3510”
sudo nano /etc/watchdog.conf zmieniamy usuwając # dla 
	watchdog-device = /dev/watchdog	
	max-load-1 = 24
reboot
sprawdzanie
sudo /etc/init.d/watchdog status
jak leży to podnosimy 
sudo /etc/init.d/watchdog start
fork bomba
:(){ :|:& };:
po paru sekundach powinien nastąpić reset systemu